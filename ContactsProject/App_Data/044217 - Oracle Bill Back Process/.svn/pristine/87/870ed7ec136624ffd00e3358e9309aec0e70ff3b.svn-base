CREATE OR REPLACE PACKAGE BODY MC_INTERFACES.billback_Int AS
/******************************************************************************
   NAME:       billback_Int
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/17/2017      svelu       1. Created this package body.
******************************************************************************/
 PROCEDURE GET_VAL_REFCUR_PROC(V_CLAIM_UID IN NUMBER, OUT_REFCURSOR OUT BBK_BASEREFTYPE_REF)
 IS
 BEGIN
 
  OPEN OUT_REFCURSOR FOR
          SELECT A.CLAIM_UID, B.CLMNT_UID, B.EVENT_NUM
                , (CASE WHEN B.CLMNT_UID IS NULL THEN 'N' ELSE 'Y' END) CLMNT_EXISTS
                , (CASE WHEN C.EVENT_NUM IS NULL THEN 'N' ELSE 'Y' END) EVENT_EXISTS
                , A.DELETED CLAIM_DELETED
                , (CASE WHEN GET_RESERVE_STAT(A.EVENT_NUM) = 'A' THEN 'Y' ELSE 'N' END) RSV_STAT_ACCEPT
                , (CASE WHEN D.EVENT_NUM IS NULL THEN 'N' ELSE 'Y' END) SIR_REC_EXISTS
                , (CASE WHEN GET_SIR_LINE(A.EVENT_NUM) IS NOT NULL THEN 'Y' ELSE 'N' END) SIR_LINE_REC_EXISTS
                FROM VIAONE.CLAIM A
                LEFT JOIN VIAONE.CLMNT B ON A.EVENT_NUM = B.EVENT_NUM
                LEFT JOIN VIAONE.EVENT C ON A.EVENT_NUM = C.EVENT_NUM
                LEFT JOIN VIAONE.SIR D ON A.EVENT_NUM = D.EVENT_NUM
                WHERE A.CLAIM_UID = V_CLAIM_UID
                ORDER BY A.CLAIM_UID;
                   
 END;
  
  
  FUNCTION GET_VALIDATION_DATA_REFCUR(V_CLAIM_UID IN NUMBER) RETURN BBK_BASEREFTYPE_REF IS
  OUT_REFCURSOR BBK_BASEREFTYPE_REF;
  
  BEGIN
  
  
  OPEN OUT_REFCURSOR FOR
  
  SELECT A.CLAIM_UID, B.CLMNT_UID, B.EVENT_NUM
                , (CASE WHEN B.CLMNT_UID IS NULL THEN 'N' ELSE 'Y' END) CLMNT_EXISTS
                , (CASE WHEN C.EVENT_NUM IS NULL THEN 'N' ELSE 'Y' END) EVENT_EXISTS
                , A.DELETED CLAIM_DELETED
                , (CASE WHEN GET_RESERVE_STAT(A.EVENT_NUM) = 'A' THEN 'Y' ELSE 'N' END) RSV_STAT_ACCEPT
                , (CASE WHEN D.EVENT_NUM IS NULL THEN 'N' ELSE 'Y' END) SIR_REC_EXISTS
                , (CASE WHEN GET_SIR_LINE(A.EVENT_NUM) IS NOT NULL THEN 'Y' ELSE 'N' END) SIR_LINE_REC_EXISTS
                FROM VIAONE.CLAIM A
                LEFT JOIN VIAONE.CLMNT B ON A.EVENT_NUM = B.EVENT_NUM
                LEFT JOIN VIAONE.EVENT C ON A.EVENT_NUM = C.EVENT_NUM
                LEFT JOIN VIAONE.SIR D ON A.EVENT_NUM = D.EVENT_NUM
                WHERE A.CLAIM_UID = V_CLAIM_UID
                ORDER BY A.CLAIM_UID;
                
      RETURN OUT_REFCURSOR;
  END;



 
 PROCEDURE GET_CLAIMS_PROC2(V_DATA_SET IN VARCHAR2, V_CLAIM_OPEN IN VARCHAR2, V_CONT_NUM IN VARCHAR2, 
 V_VAL_DATE_FROM IN VARCHAR2, V_VAL_DATE_TO IN VARCHAR2, V_SVC_TYPE1 IN VARCHAR2, V_CLM_STATUS IN VARCHAR2,
  OUT_REFCURSOR OUT BBK_CLAIMS_REF)
 IS
 BEGIN
 
  OPEN OUT_REFCURSOR FOR
    SELECT A.CLAIM_UID, A.CONT_NUM AS ClientID, A.FILE_NUM AS Claim#, B.CLMNT_FNAME ClmntFName, B.CLMNT_LNAME ClmntLName,
    A.DATE_EVENT AS DOL, A.PROC_UNIT AS ProcessingUnit, '          ' AS PayCode, '          ' AS AllocationAmount,
    A.VENDOR_ID, A.DATA_SET, A.CLAIM_TYPE, A.STATE_PAYROLL, ST.STATE_A, '          ' AS BInvoice,    
    TO_DATE(V_VAL_DATE_FROM,'MM/DD/YYYY') AS DateFrom, TO_DATE(V_VAL_DATE_TO,'MM/DD/YYYY') AS DateThru,
    A.LINE_CODE, A.SUBTYPE AS SUB_TYPE, '                                    ' as GUID
   
    FROM VIAONE.CLAIM A
    INNER JOIN VIAONE.CLAIMDWC CW ON A.EVENT_NUM = CW.EVENT_NUM
       AND CW.CLMNT_NUM = A.CLMNT_NUM
       AND CW.CLAIM_NUM = A.CLAIM_NUM
       AND CW.PROC_UNIT = A.PROC_UNIT
    INNER JOIN VIAONE.STATE ST ON ST.STATE_NUM = CAST(CW.STATE_JURIS AS INT)
    INNER JOIN VIAONE.MC_REFER MCR ON A.EVENT_NUM = MCR.EVENT_NUM
        AND A.CLMNT_NUM = MCR.CLMNT_NUM
        AND A.CLAIM_NUM = MCR.CLAIM_NUM
        AND A.PROC_UNIT = MCR.PROC_UNIT
        AND MCR.REFER_STATUS = 'Accept'
      
        AND MCR.DATE_OPEN <= TO_DATE(V_VAL_DATE_TO,'MM/DD/YYYY')

        AND MCR.TYPE = V_SVC_TYPE1 --TCM or UR
        AND MCR.DELETED = 'N'  
  
    LEFT JOIN VIAONE.CLMNT B ON A.EVENT_NUM = B.EVENT_NUM
    LEFT JOIN VIAONE.EVENT C ON A.EVENT_NUM = C.EVENT_NUM
    LEFT JOIN VIAONE.SIR D ON A.EVENT_NUM = D.EVENT_NUM
        AND A.SIR_NUM = D.SIR_NUM
        AND A.PLAN_NUM = D.PLAN_NUM
    LEFT JOIN VIAONE.LINE E ON D.LINE_NUM = E.LINE_NUM
        AND E.CONT_NUM = D.CONT_NUM
        AND E.PLAN_NUM = D.PLAN_NUM

    WHERE A.DATA_SET = V_DATA_SET
    AND A.CLAIM_OPEN = V_CLAIM_OPEN
    AND A.CONT_NUM = V_CONT_NUM
    AND A.DELETED = 'N' -- CLAIM NOT DELETED
    AND A.CLAIM_TYPE  != 'IO' --CLAIM TYPE NOT IO
    AND B.CLMNT_UID IS NOT NULL -- CLAIMANT EXISTS
    AND C.EVENT_NUM IS NOT NULL -- EVENT EXISTS
    AND GET_RESERVE_STAT(A.EVENT_NUM) = 'A' --RSV_STAT_ACCEPT
    AND D.EVENT_NUM IS NOT NULL --SIR RECORD EXISTS
    AND GET_SIR_LINE(A.EVENT_NUM) IS NOT NULL -- SIR LINE RECORD EXISTS
    
   AND GET_CLMSTAT_OF_CLAIM(A.EVENT_NUM, A.CLMNT_NUM, A.CLAIM_NUM,  A.PROC_UNIT,  --CLMSTAT RECORD EXISTS
   V_VAL_DATE_FROM, V_VAL_DATE_TO, V_CLM_STATUS) = 1  
   
   AND A.DATE_EVENT BETWEEN TO_DATE(V_VAL_DATE_FROM,'MM/DD/YYYY') AND TO_DATE(V_VAL_DATE_TO,'MM/DD/YYYY')
   
    AND ROWNUM < 500
    AND ( MCR.DATE_CLOSE >= TO_DATE(V_VAL_DATE_FROM,'MM/DD/YYYY') OR MCR.DATE_CLOSE IS NULL)
    ORDER BY  A.CLAIM_UID;
                   
 END;
 
 PROCEDURE INSERT_LOG(V_LOG_CATEGORY IN VARCHAR2, V_LOG IN VARCHAR2, V_USER_ID IN VARCHAR2, V_F_NAME IN VARCHAR2,
    V_L_NAME IN VARCHAR2, V_SESSION_ID IN VARCHAR2)
 IS
 BEGIN
    INSERT INTO MC_INTERFACES.BILLBACK_ACT_LOG (LOG_CATEGORY, LOG, USER_ID, USER_FIRST_NAME, 
    USER_LAST_NAME, SESSION_ID)
    VALUES (  V_LOG_CATEGORY, V_LOG, V_USER_ID, V_F_NAME, V_L_NAME, V_SESSION_ID);
    
 
 END;


PROCEDURE GET_LOGDATA(V_SESSION_ID IN VARCHAR2, OUT_REFCURSOR OUT BBK_LOGDATA_REF)
IS
BEGIN
    OPEN OUT_REFCURSOR FOR
        SELECT * FROM MC_INTERFACES.BILLBACK_ACT_LOG WHERE SESSION_ID = V_SESSION_ID;
    
END;



PROCEDURE GET_APP_USER(V_USER_ID IN VARCHAR2, OUT_REFCURSOR OUT BBK_APP_USERDATA_REF)
IS
BEGIN
    OPEN OUT_REFCURSOR FOR
        SELECT USER_ID, ACTIVE, USER_FIRST_NAME, USER_LAST_NAME FROM MC_INTERFACES.BILLBACK_USERS 
        WHERE USER_ID = V_USER_ID 
        AND ACTIVE = 1;

END;
 

PROCEDURE GET_SERVICE_TYPE_BY_ID(V_DISPLAY_ORDER_ID IN INTEGER, OUT_REFCURSOR OUT BBK_GET_SERVICE_TYPE_BY_ID_REF)
IS
BEGIN
    OPEN OUT_REFCURSOR FOR
        SELECT SERVICE_TYPE, SEARCH_ENABLE, ADD_ENABLE, IMPORT_ENABLE, REMOVE_ENABLE, PROCESS_ENABLE, DISPLAY_ORDER_ID
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        WHERE A.DISPLAY_ORDER_ID = V_DISPLAY_ORDER_ID
        ORDER BY A.DISPLAY_ORDER_ID;
  
END;

PROCEDURE GET_ALL_SERVICE_TYPES(OUT_REFCURSOR OUT BBK_GET_ALL_SERVICE_TYPES_REF)
IS
BEGIN
    OPEN OUT_REFCURSOR FOR
        SELECT DISPLAY, DISPLAY_ORDER_ID, SERVICE_TYPE 
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        ORDER BY A.DISPLAY_ORDER_ID;
END;

PROCEDURE GET_ID_BY_SERVICE_TYPE(V_SERVICE_TYPE IN VARCHAR2, DISPLAY_ORD_ID OUT INTEGER)
IS
BEGIN
     SELECT A.DISPLAY_ORDER_ID INTO DISPLAY_ORD_ID 
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        WHERE A.SERVICE_TYPE = V_SERVICE_TYPE
         AND ROWNUM = 1;   
    EXCEPTION
     WHEN NO_DATA_FOUND THEN
       DISPLAY_ORD_ID := -1;   

END;


PROCEDURE CHECK_SERVICE_TYPE_EXISTS(V_SERVICE_TYPE IN VARCHAR2, DISPLAY_ORD_ID OUT INTEGER)
IS
BEGIN    
     SELECT A.DISPLAY_ORDER_ID INTO DISPLAY_ORD_ID 
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        WHERE A.SERVICE_TYPE = V_SERVICE_TYPE
         AND ROWNUM = 1;   
    EXCEPTION
     WHEN NO_DATA_FOUND THEN
       DISPLAY_ORD_ID := -1;   
    
END;


PROCEDURE GET_PAYCODE_LOGIC(V_SERVICE_TYPE IN VARCHAR2, OUT_REFCURSOR OUT BBK_GET_PAYCODE_LOGIC_REF)
IS
BEGIN
    OPEN OUT_REFCURSOR FOR
        SELECT SERVICE_TYPE, DESCRIPTION, DISPLAY, DISPLAY_ORDER_ID, TAXID, TAXSUBID, PAYCODE_LOGIC, PAYCODE_LOGIC_DESC, PAYCODE
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        WHERE A.SERVICE_TYPE = V_SERVICE_TYPE;
        
END;

PROCEDURE GET_NEXT_DISPLAY_ORDER(DISPLAY_ORD_ID OUT INTEGER)
IS
BEGIN    
     SELECT MAX(DISPLAY_ORDER_ID) +1 INTO DISPLAY_ORD_ID 
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A;
          
END;



PROCEDURE INSERT_NEW_SERVICE_TYPE(V_SERVICE_TYPE IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DISPLAY IN VARCHAR2, V_DISPLAY_ORDER_ID IN VARCHAR2,
    V_TAXID IN VARCHAR2, V_TAXSUBID IN VARCHAR2, V_SEARCH_ENABLE IN INTEGER, V_ADD_ENABLE IN INTEGER, V_IMPORT_ENABLE IN INTEGER, V_REMOVE_ENABLE IN INTEGER,
    V_PROCESS_ENABLE IN INTEGER, V_PAYCODE_LOGIC IN INTEGER, V_PAYCODE_LOGIC_DESC IN VARCHAR2, V_PAYCODE IN VARCHAR2 )
IS
 BEGIN
    INSERT INTO MC_INTERFACES.BILLBACK_SERVICE_TYPES (SERVICE_TYPE, DESCRIPTION, DISPLAY, DISPLAY_ORDER_ID,
    TAXID, TAXSUBID, SEARCH_ENABLE, ADD_ENABLE, IMPORT_ENABLE, REMOVE_ENABLE, PROCESS_ENABLE, PAYCODE_LOGIC, PAYCODE_LOGIC_DESC, PAYCODE) 
    VALUES (  V_SERVICE_TYPE, V_DESCRIPTION, V_DISPLAY, V_DISPLAY_ORDER_ID, V_TAXID, V_TAXSUBID, 
    V_SEARCH_ENABLE, V_ADD_ENABLE, V_IMPORT_ENABLE, V_REMOVE_ENABLE, V_PROCESS_ENABLE, V_PAYCODE_LOGIC, V_PAYCODE_LOGIC_DESC, V_PAYCODE );
    
 
 END;
 
 PROCEDURE BBK_GET_CLIENT_BY_NAME(V_CLIENTNAME IN VARCHAR2, OUT_REFCURSOR OUT BBK_GET_CLIENT_BY_NAME_REF)
 IS
 BEGIN
 OPEN OUT_REFCURSOR FOR
     SELECT CONTRACT_UID, CONT_NUM, NAME, DELETED, 
     CASE WHEN CONT_STAT = 'A' THEN 'ACTIVE'
          WHEN CONT_STAT = 'R' THEN 'RUNOFF'
          END AS CONT_STAT 
     FROM VIAONE.CONTRACT C
     WHERE UPPER(C.NAME) LIKE '%' || UPPER(V_CLIENTNAME) || '%'
     OR UPPER(C.NAME) LIKE UPPER(V_CLIENTNAME) || '%'
     OR UPPER(C.NAME) LIKE '%' || UPPER(V_CLIENTNAME)
     AND C.CONT_STAT != 'D'; -- GET ONLY ACTIVE CLIENTS
 END;

PROCEDURE BBK_GET_CLIENT_BY_ID(V_CLIENTID IN NUMBER, V_SEARCH_EXACT IN NUMBER, OUT_REFCURSOR OUT BBK_GET_CLIENT_BY_ID_REF)
 IS 
 BEGIN
 DECLARE V_SearchString VARCHAR(30);
    BEGIN
    
    -- V_SEARCH_EXACT = 1 will find only exact match for client id
    IF V_SEARCH_EXACT = 1 THEN 
        V_SearchString := V_CLIENTID ;
    ELSE 
        V_SearchString := V_CLIENTID || '%';
    END IF;
    
    OPEN OUT_REFCURSOR FOR
     SELECT CONTRACT_UID, CONT_NUM, NAME, DELETED, 
     CASE WHEN CONT_STAT = 'A' THEN 'ACTIVE'
          WHEN CONT_STAT = 'R' THEN 'RUNOFF'
          END AS CONT_STAT
     FROM VIAONE.CONTRACT C
     WHERE C.CONT_NUM LIKE V_SearchString
     AND C.CONT_STAT != 'D'; -- GET ONLY ACTIVE CLIENTS
     END;
     
 END;

FUNCTION get_sir_line(event_num IN VARCHAR2)
    RETURN NUMBER IS line_uid NUMBER; 
    BEGIN     
        SELECT B.LINE_UID INTO line_uid 
        FROM VIAONE.SIR A 
        INNER JOIN VIAONE.LINE B ON A.LINE_NUM = B.LINE_NUM
         AND A.CONT_NUM = B.CONT_NUM
         AND A.PLAN_NUM = B.PLAN_NUM
        WHERE A.EVENT_NUM = event_num AND ROWNUM = 1;
        RETURN(line_uid);
    END;

FUNCTION GET_ID_BY_SERVICE_TYPE(SERVICE_TYPE IN VARCHAR2)
    RETURN NUMBER IS DISPLAY_ORD_ID NUMBER;
BEGIN     
        SELECT A.DISPLAY_ORDER_ID INTO DISPLAY_ORD_ID 
        FROM MC_INTERFACES.BILLBACK_SERVICE_TYPES A
        WHERE A.SERVICE_TYPE = SERVICE_TYPE
         AND ROWNUM = 1;
        RETURN(DISPLAY_ORD_ID);
    END;
    
FUNCTION get_reserve_stat(event_num IN VARCHAR2)
    RETURN VARCHAR2 IS reserve_stat VARCHAR2(1); 
    BEGIN     
        SELECT D.RES_STATUS INTO reserve_stat FROM VIAONE.RESERVE D WHERE D.EVENT_NUM = event_num AND ROWNUM = 1;
        RETURN(reserve_stat);
    END;
    
    
FUNCTION GET_CLMSTAT_OF_CLAIM(V_EVENT_NUM IN VARCHAR2, V_CLMNT_NUM IN VARCHAR2, V_CLAIM_NUM IN VARCHAR2, V_PROC_UNIT IN VARCHAR2, 
    V_VAL_DATE_FROM IN VARCHAR2, V_VAL_DATE_TO IN VARCHAR2, V_CLM_STATUS IN VARCHAR2 )
    RETURN NUMBER IS 
    RETURNVAL NUMBER := 1;
    CLMSTAT_UID NUMBER; 
    BEGIN
        
    SELECT CS.CLMSTAT_UID INTO CLMSTAT_UID
    FROM VIAONE.CLMSTAT CS
    WHERE CS.EVENT_NUM = V_EVENT_NUM
    AND CS.CLMNT_NUM = V_CLMNT_NUM
    AND CS.CLAIM_NUM = V_CLAIM_NUM
    AND CS.PROC_UNIT = V_PROC_UNIT
    AND CS.DATE_STAT <= TO_DATE(V_VAL_DATE_TO,'MM/DD/YYYY')
    AND CS.CLM_STATUS = V_CLM_STATUS
    AND ROWNUM = 1;
    RETURN RETURNVAL;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURNVAL := 0;
            RETURN RETURNVAL;
            
    
    END;
    
PROCEDURE BBK_GET_CLAIM_INFO(V_CLAIM_NUMBER_LIST IN CLAIMNUMBER_LIST_TT, OUT_REFCURSOR OUT BBK_GET_CLAIM_INFO_REF)
IS
BEGIN
 OPEN OUT_REFCURSOR FOR
      SELECT 
        C.FILE_NUM AS CLAIM_NUMBER, C.CONT_NUM AS CLIENT_ID, '' AS TAX_ID, '' AS TAX_SUB, '' AS BINVOICE,
        '' AS AMOUNT, '' AS DATE_PAY_FROM,  '' AS DATE_PAY_THRU, '' AS SERVICE_TYPE,
        C.CLAIM_UID, C.VENDOR_ID, C.STATE_PAYROLL, ST.STATE_A, C.DATA_SET, C.CLAIM_TYPE, C.DELETED,
         B.CLMNT_FNAME AS CLMNTFNAME, B.CLMNT_LNAME AS CLMNTLNAME, C.DATE_EVENT AS DOL
        
        FROM VIAONE.CLAIM C 
        INNER JOIN VIAONE.CLMNT B ON C.EVENT_NUM = B.EVENT_NUM  
        INNER JOIN VIAONE.CLAIMDWC CW 
              ON CW.EVENT_NUM = C.EVENT_NUM 
                  AND CW.CLMNT_NUM = C.CLMNT_NUM 
                  AND CW.CLAIM_NUM = C.CLAIM_NUM 
                  AND CW.PROC_UNIT = C.PROC_UNIT 
        INNER JOIN VIAONE.STATE ST 
              ON ST.STATE_NUM = CAST(CW.STATE_JURIS AS INT) 
          AND C.FILE_NUM IN (SELECT * FROM TABLE (V_CLAIM_NUMBER_LIST) );
END;
END billback_Int;
/
