CREATE OR REPLACE PACKAGE MC_INTERFACES.Billback_Int AS
/******************************************************************************
   NAME:       Billback_Int
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        04/17/2017      svelu       1. Created this package.
******************************************************************************/

TYPE BBK_BASEREFTYPE_RC IS RECORD 
   ( 
      CLAIM_UID NUMBER,
      CLMNT_UID NUMBER,     
      EVENT_NUM NUMBER,
      CLMNT_EXISTS VARCHAR2(1),
      EVENT_EXISTS VARCHAR2(1), 
      CLAIM_DELETED VARCHAR2(1),    
      RSV_STAT_ACCEPT   VARCHAR2(1),
      SIR_REC_EXISTS   VARCHAR2(1),
      SIR_LINE_REC_EXISTS   VARCHAR2(1)          
   );    

TYPE BBK_BASEREFTYPE_REF IS REF CURSOR
      RETURN BBK_BASEREFTYPE_RC;
      

      
  PROCEDURE GET_VAL_REFCUR_PROC(V_CLAIM_UID IN NUMBER, OUT_REFCURSOR OUT BBK_BASEREFTYPE_REF);  
  
  

 FUNCTION GET_VALIDATION_DATA_REFCUR(V_CLAIM_UID IN NUMBER) RETURN BBK_BASEREFTYPE_REF;


TYPE BBK_CLAIMS_RC IS RECORD 
   ( 
      CLAIM_UID NUMBER,
     
      CLIENTID VARCHAR2(30),
      CLAIM# VARCHAR2(30),
      CLMNTFNAME VARCHAR2(50),
      CLMNTLNAME VARCHAR2(50),
      DOL DATE,
      PROCESSINGUNIT VARCHAR2(30),
      PAYCODE VARCHAR2(30),
      ALLOCATIONAMOUNT NUMBER,
      VENDOR_ID VARCHAR2(30),
      DATA_SET VARCHAR2(30),
      CLAIM_TYPE VARCHAR2(30),    
      STATE_PAYROLL VARCHAR2(30),
      STATE_A VARCHAR2(30),
      BINVOICE VARCHAR2(30),
      DATEFROM DATE,
      DATETHRU DATE,
      SUB_TYPE VARCHAR2(30),
      LINE_CODE VARCHAR2(30),
      GUID VARCHAR2(50)      
   );    

   TYPE BBK_CLAIMS_REF IS REF CURSOR
      RETURN BBK_CLAIMS_RC;


PROCEDURE GET_CLAIMS_PROC2(V_DATA_SET IN VARCHAR2, V_CLAIM_OPEN IN VARCHAR2, V_CONT_NUM IN VARCHAR2, V_VAL_DATE_FROM IN VARCHAR2, 
    V_VAL_DATE_TO IN VARCHAR2, V_SVC_TYPE1 IN VARCHAR2, V_CLM_STATUS IN VARCHAR2, OUT_REFCURSOR OUT BBK_CLAIMS_REF);

    
    
PROCEDURE INSERT_LOG(V_LOG_CATEGORY IN VARCHAR2, V_LOG IN VARCHAR2, V_USER_ID IN VARCHAR2, V_F_NAME IN VARCHAR2,
    V_L_NAME IN VARCHAR2, V_SESSION_ID IN VARCHAR2);


-- *************** GET_LOG_DATA *****************
TYPE BBK_LOGDATA_RC IS RECORD(LOG_ID INTEGER, LOG_CATEGORY VARCHAR2(200), LOG VARCHAR2(1000), LOG_DATE TIMESTAMP(6),
 SESSION_ID VARCHAR2(36), USER_ID VARCHAR2(60), USER_FIRST_NAME VARCHAR2(60), USER_LAST_NAME VARCHAR2(60) );
TYPE BBK_LOGDATA_REF is REF CURSOR RETURN BBK_LOGDATA_RC;
PROCEDURE GET_LOGDATA(V_SESSION_ID IN VARCHAR2, OUT_REFCURSOR OUT BBK_LOGDATA_REF);
-- *************** GET_LOG_DATA *****************


-- *************** GET_APP_USER_DATA *****************
TYPE BBK_APP_USERDATA_RC IS RECORD(USER_ID VARCHAR2(60), ACTIVE INTEGER, USER_FIRST_NAME VARCHAR2(60), USER_LAST_NAME VARCHAR2(60));
TYPE BBK_APP_USERDATA_REF is REF CURSOR RETURN BBK_APP_USERDATA_RC;
PROCEDURE GET_APP_USER(V_USER_ID IN VARCHAR2, OUT_REFCURSOR OUT BBK_APP_USERDATA_REF);
-- *************** GET_APP_USER_DATA *****************

-- *************** GET SERVICE TYPE BY ORDER ID *****************
TYPE BBK_GET_SERVICE_TYPE_BY_ID_RC IS RECORD(SERVICE_TYPE VARCHAR2(5), SEARCH_ENABLE INTEGER, ADD_ENABLE INTEGER, IMPORT_ENABLE INTEGER, REMOVE_ENABLE INTEGER,
    PROCESS_ENABLE INTEGER, DISPLAY_ORDER_ID INTEGER);
TYPE BBK_GET_SERVICE_TYPE_BY_ID_REF is REF CURSOR RETURN BBK_GET_SERVICE_TYPE_BY_ID_RC;
PROCEDURE GET_SERVICE_TYPE_BY_ID( V_DISPLAY_ORDER_ID IN INTEGER, OUT_REFCURSOR OUT BBK_GET_SERVICE_TYPE_BY_ID_REF);
-- *************** GET SERVICE TYPE BY ORDER ID *****************

-- *************** GET ALL SERVICE TYPES *****************
TYPE BBK_GET_ALL_SERVICE_TYPES_RC IS RECORD(SERVICE_TYPE VARCHAR2(5), DISPLAY VARCHAR2(200), DISPLAY_ORDER_ID INTEGER);
TYPE BBK_GET_ALL_SERVICE_TYPES_REF is REF CURSOR RETURN BBK_GET_ALL_SERVICE_TYPES_RC;
PROCEDURE GET_ALL_SERVICE_TYPES(OUT_REFCURSOR OUT BBK_GET_ALL_SERVICE_TYPES_REF);
-- *************** GET ALL SERVICE TYPES *****************


PROCEDURE GET_ID_BY_SERVICE_TYPE(V_SERVICE_TYPE IN VARCHAR2, DISPLAY_ORD_ID OUT INTEGER);

PROCEDURE CHECK_SERVICE_TYPE_EXISTS(V_SERVICE_TYPE IN VARCHAR2, DISPLAY_ORD_ID OUT INTEGER);

-- *************** GET PAY CODE LOGIC *****************
TYPE BBK_GET_PAYCODE_LOGIC_RC IS RECORD(SERVICE_TYPE VARCHAR2(5), DESCRIPTION VARCHAR2(200), DISPLAY VARCHAR2(200), DISPLAY_ORDER_ID INTEGER, 
TAXID VARCHAR2(25), TAXSUBID VARCHAR2(25), PAYCODE_LOGIC INTEGER, PAYCODE_LOGIC_DESC VARCHAR(200), PAYCODE VARCHAR(3));
TYPE BBK_GET_PAYCODE_LOGIC_REF is REF CURSOR RETURN BBK_GET_PAYCODE_LOGIC_RC;
PROCEDURE GET_PAYCODE_LOGIC(V_SERVICE_TYPE IN VARCHAR2, OUT_REFCURSOR OUT BBK_GET_PAYCODE_LOGIC_REF);
-- *************** GET PAY CODE LOGIC *****************

PROCEDURE GET_NEXT_DISPLAY_ORDER(DISPLAY_ORD_ID OUT INTEGER);

PROCEDURE INSERT_NEW_SERVICE_TYPE(V_SERVICE_TYPE IN VARCHAR2, V_DESCRIPTION IN VARCHAR2, V_DISPLAY IN VARCHAR2, V_DISPLAY_ORDER_ID IN VARCHAR2,
    V_TAXID IN VARCHAR2, V_TAXSUBID IN VARCHAR2, V_SEARCH_ENABLE IN INTEGER, V_ADD_ENABLE IN INTEGER, V_IMPORT_ENABLE IN INTEGER, V_REMOVE_ENABLE IN INTEGER,
    V_PROCESS_ENABLE IN INTEGER, V_PAYCODE_LOGIC IN INTEGER, V_PAYCODE_LOGIC_DESC IN VARCHAR2, V_PAYCODE IN VARCHAR2 );
    
    
FUNCTION GET_ID_BY_SERVICE_TYPE(SERVICE_TYPE IN VARCHAR2)
    RETURN NUMBER; 
    
FUNCTION get_reserve_stat(event_num IN VARCHAR2)
    RETURN VARCHAR2;

FUNCTION get_sir_line(event_num IN VARCHAR2)
    RETURN NUMBER;
  
FUNCTION GET_CLMSTAT_OF_CLAIM(V_EVENT_NUM IN VARCHAR2, V_CLMNT_NUM IN VARCHAR2, V_CLAIM_NUM IN VARCHAR2, V_PROC_UNIT IN VARCHAR2,
V_VAL_DATE_FROM IN VARCHAR2, V_VAL_DATE_TO IN VARCHAR2, V_CLM_STATUS IN VARCHAR2 )
    RETURN NUMBER;  
    
    
-- *************** GET MATCHING CLIENT NAME FROM CONTRACT *****************
TYPE BBK_GET_CLIENT_BY_NAME_RC IS RECORD(CONTRACT_UID NUMBER, CLIENTID NUMBER, NAME VARCHAR(100), DELETED VARCHAR2(1), CONTSTAT VARCHAR(40));
TYPE BBK_GET_CLIENT_BY_NAME_REF is REF CURSOR RETURN BBK_GET_CLIENT_BY_NAME_RC;
PROCEDURE BBK_GET_CLIENT_BY_NAME(V_CLIENTNAME IN VARCHAR2, OUT_REFCURSOR OUT BBK_GET_CLIENT_BY_NAME_REF);
-- *************** GET MATCHING CLIENT NAME FROM CLM_STAT *****************

-- *************** GET MATCHING CLIENT ID (CONT_NUM) FROM CONTRACT *****************
TYPE BBK_GET_CLIENT_BY_ID_RC IS RECORD(CONTRACT_UID NUMBER, CLIENTID NUMBER, NAME VARCHAR(100), DELETED VARCHAR2(1), CONTSTAT VARCHAR(40));
TYPE BBK_GET_CLIENT_BY_ID_REF is REF CURSOR RETURN BBK_GET_CLIENT_BY_ID_RC;
PROCEDURE BBK_GET_CLIENT_BY_ID(V_CLIENTID IN NUMBER, V_SEARCH_EXACT IN NUMBER, OUT_REFCURSOR OUT BBK_GET_CLIENT_BY_ID_REF);
-- *************** GET MATCHING CLIENT ID (CONT_NUM) FROM CONTRACT *****************

-- *************** PL SQL ASSOCIATIVE ARRAY - TO GET CLAIM INFORMATION *****************
TYPE CLAIMNUMBER_LIST_TT IS TABLE OF VARCHAR(100) INDEX BY BINARY_INTEGER;
TYPE BBK_GET_CLAIM_INFO_RC IS RECORD
(
CLAIM_NUMBER VARCHAR(100), 
CLIENTID NUMBER, 
TAX_ID VARCHAR(30),
TAX_SUB VARCHAR(30),
BINVOICE VARCHAR(30),
AMOUNT VARCHAR(30),
DATE_PAY_FROM DATE,
DATE_PAY_THRU DATE,
SERVICE_TYPE VARCHAR(30),
CLAIM_UID NUMBER,
VENDOR_ID VARCHAR(30),
STATE_PAYROLL VARCHAR(30),
STATE_A VARCHAR(30),
DATA_SET VARCHAR(30),
CLAIM_TYPE VARCHAR(30),
DELETED VARCHAR(30),
CLMNTFNAME VARCHAR(30),
CLMNTLNAME VARCHAR(30),
DOL DATE

);
TYPE BBK_GET_CLAIM_INFO_REF is REF CURSOR RETURN BBK_GET_CLAIM_INFO_RC;
PROCEDURE BBK_GET_CLAIM_INFO(V_CLAIM_NUMBER_LIST IN CLAIMNUMBER_LIST_TT, OUT_REFCURSOR OUT BBK_GET_CLAIM_INFO_REF);
-- *************** PL SQL ASSOCIATIVE ARRAY - TO GET CLAIM INFORMATION *****************

END Billback_Int;
/
